--- flask_version/base.py.orig	2013-06-24 12:13:22.282405548 +1200
+++ flask_version/base.py	2013-06-24 12:15:06.492268095 +1200
@@ -21,6 +21,8 @@
         self.startup_token = kwds.pop('startup_token', None)
         Flask.__init__(self, *args, **kwds)
 
+        self.config['SESSION_COOKIE_HTTPONLY'] = False
+
         self.root_path = SAGENB_ROOT
 
         self.add_static_path('/css', os.path.join(DATA, "sage", "css"))
@@ -56,28 +58,6 @@
                           endpoint='/static'+base_url,
                           view_func=partial(self.static_view_func, root_path))
 
-    def save_session(self, session, response):
-        """
-        This method needs to stay in sync with the version in Flask.
-        The only modification made to it is the ``httponly=False``
-        passed to ``save_cookie``.
-
-        Saves the session if it needs updates.  For the default
-        implementation, check :meth:`open_session`.
-
-        :param session: the session to be saved (a
-                        :class:`~werkzeug.contrib.securecookie.SecureCookie`
-                        object)
-        :param response: an instance of :attr:`response_class`
-        """
-        expires = domain = None
-        if session.permanent:
-            expires = datetime.utcnow() + self.permanent_session_lifetime
-        if self.config['SERVER_NAME'] is not None:
-            domain = '.' + self.config['SERVER_NAME']
-        session.save_cookie(response, self.session_cookie_name,
-                            expires=expires, httponly=False, domain=domain)
-
     def message(self, msg, cont='/', username=None, **kwds):
         """Returns an error message to the user."""
         template_dict = {'msg': msg, 'cont': cont, 'username': username}

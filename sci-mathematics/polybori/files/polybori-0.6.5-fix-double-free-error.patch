--- polybori/include/BooleEnv.h.orig	2010-01-29 09:02:02.000000000 +0000
+++ polybori/include/BooleEnv.h	2010-08-21 07:54:32.094170620 +0000
@@ -37,7 +37,7 @@
 
 // Obey stricter dependence of Sun Studio compiler
 // todo: resolve dependency 
-#if defined(__SUNPRO_C) || defined(__SUNPRO_CC)
+#if 1 // defined(__SUNPRO_C) || defined(__SUNPRO_CC)
 # define PBORI_ENV_RING_NOTINLINED
 #endif
 
@@ -45,7 +45,6 @@
 
 
 class BoolePolyRing;
-extern BoolePolyRing active_ring;
 class CDynamicOrderBase;
 
 /** @class BooleEnv
@@ -122,6 +121,7 @@
   static ring_type& ring();
 #else
   static ring_type& ring() {
+    static BooleEnv::ring_type active_ring(1000, CTypes::lp, false);
     return active_ring;
   }
 #endif
--- polybori/src/BooleEnv.cc.orig	2010-01-29 09:02:02.000000000 +0000
+++ polybori/src/BooleEnv.cc	2010-08-21 07:58:34.678170342 +0000
@@ -42,13 +42,16 @@
 BEGIN_NAMESPACE_PBORI
 
 
-BooleEnv::ring_type active_ring;
+//BooleEnv::ring_type active_ring;
 // Note, direct access via friends, to  active_ring.pOrder and pMgt, because
 // inline doesn't work up to now, because os the undefined type issue.
 
 /// @todo needs inlining!!!
 #ifdef PBORI_ENV_RING_NOTINLINED
-BooleEnv::ring_type& BooleEnv::ring() { return active_ring; }
+BooleEnv::ring_type& BooleEnv::ring() {
+  static BooleEnv::ring_type active_ring(1000, CTypes::lp, false);
+  return active_ring;
+}
 #endif 
 
 BooleEnv::block_iterator 
@@ -77,7 +80,7 @@
 
 BooleEnv::idx_type
 BooleEnv::lastBlockStart() {
-  return active_ring.lastBlockStart();
+  return ring().lastBlockStart();
 }
 
 
@@ -160,7 +163,7 @@
   }
 
 
-void BooleEnv::set(ring_type& theRing) { active_ring = theRing; }
+void BooleEnv::set(ring_type& theRing) { ring() = theRing; }
 
 
 

# HG changeset patch
# User Jean-Pierre Flori <flori@enst.fr>
# Date 1297786445 -3600
# Node ID 1911cc23d6cf59fe9bed5f6964875805955b9c81
# Parent  5bff07b42baf278a7f8154e66e8f3d849eb60561
# Parent  6e6f96f8967a6eaf52fa383bfae6c3554e7d1fcd
Better formatting of error messages thrown when Maxima throws an error

diff -r 5bff07b42baf -r 1911cc23d6cf sage/interfaces/maxima_lib.py
--- a/sage/interfaces/maxima_lib.py	Tue Feb 15 17:11:40 2011 +0100
+++ b/sage/interfaces/maxima_lib.py	Tue Feb 15 17:14:05 2011 +0100
@@ -488,7 +488,39 @@
 ecl_eval("(set-locale-subdir)")
 ecl_eval("(set-pathnames)")
 ecl_eval("(defun add-lineinfo (x) x)")
-ecl_eval("""(defun retrieve (msg flag &aux (print? nil))(error (concatenate 'string "Maxima asks:" (meval (list '($string) msg)))))""")
+#the following is a direct adaption of the definition of "retrieve" in the Maxima file
+#macsys.lisp. This routine is normally responsible for displaying a question and
+#returning the answer. We change it to throw an error in which the text of the question
+#is included. We do this by running exactly the same code as in the original definition
+#of "retrieve", but with *standard-output* redirected to a string.
+ecl_eval(r"""
+(defun retrieve (msg flag &aux (print? nil))
+  (declare (special msg flag print?))
+  (or (eq flag 'noprint) (setq print? t))
+  (error (concatenate 'string "Maxima asks:" (with-output-to-string (*standard-output*)
+      (terpri)
+      (cond ((not print?)
+	     (setq print? t)
+	     (princ *prompt-prefix*)
+	     (princ *prompt-suffix*))
+	    ((null msg)
+	     (princ *prompt-prefix*)
+	     (princ *prompt-suffix*))
+	    ((atom msg)
+	     (format t "~a~a~a" *prompt-prefix* msg *prompt-suffix*)
+	     (mterpri))
+	    ((eq flag t)
+	     (princ *prompt-prefix*)
+	     (mapc #'princ (cdr msg))
+	     (princ *prompt-suffix*)
+	     (mterpri))
+	    (t
+	     (princ *prompt-prefix*)
+	     (displa msg)
+	     (princ *prompt-suffix*)
+	     (mterpri)))))))
+""")
+
 ecl_eval('(defparameter *dev-null* (make-two-way-stream (make-concatenated-stream) (make-broadcast-stream)))')
 ecl_eval('(defun principal nil (error "Divergent Integral"))')
 

# HG changeset patch
# User Nils Bruin <nbruin@sfu.ca>
# Date 1296372056 28800
# Node ID b126bfaae82fe22ba5f781d4525abd6a03cecce9
# Parent  b5c8d7135782fc7183c5815b9311e573953da8bd
[mq]: errorcatching.patch

diff -r b5c8d7135782 -r b126bfaae82f sage/interfaces/maxima_lib.py
--- sage/interfaces/maxima_lib.py	Mon Feb 08 21:31:35 2010 -0800
+++ sage/interfaces/maxima_lib.py	Sat Jan 29 23:20:56 2011 -0800
@@ -492,20 +492,34 @@
 ecl_eval('(defparameter *dev-null* (make-two-way-stream (make-concatenated-stream) (make-broadcast-stream)))')
 ecl_eval('(defun principal nil (error "Divergent Integral"))')
 
+ecl_eval("(setf $errormsg nil)")
+
 maxima_eval=ecl_eval("""
-    (defun maxima-eval( form )
-        (let ((result (catch 'macsyma-quit (cons 'maxima_eval (meval form)))))
-            ;(princ (list "result=" result))
-            ;(terpri)
-            ;(princ (list "$error=" $error))
-            ;(terpri)
-            (cond
-                ((and (consp result) (eq (car result) 'maxima_eval)) (cdr result))
-                ((eq result 'maxima-error) (error (cadr $error)))
-                (t (error (concatenate 'string "Maxima condition. result:" (princ-to-string result) "$error:" (princ-to-string $error))))
-            )
+(defun maxima-eval( form )
+    (let ((result (catch 'macsyma-quit (cons 'maxima_eval (meval form)))))
+        (princ (list "result=" result))
+        (terpri)
+        (princ (list "$error=" $error))
+        (terpri)
+        (cond
+            ((and (consp result) (eq (car result) 'maxima_eval)) (cdr result))
+            ((eq result 'maxima-error)
+                (let ((the-jig (process-error-argl (cddr $error))))
+                    (mapc #'set (car the-jig) (cadr the-jig))
+                    (error
+                       (with-output-to-string (stream)
+                           (apply #'mformat stream (cadr $error) (caddr the-jig))))
+                ))
+            (t 
+                (let ((the-jig (process-error-argl (cddr $error))))
+                    (mapc #'set (car the-jig) (cadr the-jig))
+                    (error (concatenate 'string "Maxima condition. result:" (princ-to-string result) "$error:"
+                       (with-output-to-string (stream)
+                           (apply #'mformat stream (cadr $error) (caddr the-jig)))))
+                ))
         )
     )
+)
 """)
 
 #ecl_eval('(defun ask-evod (x even-odd)(error "Maxima asks a question"))')

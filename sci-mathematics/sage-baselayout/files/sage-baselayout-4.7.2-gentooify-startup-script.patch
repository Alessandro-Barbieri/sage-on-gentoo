38,41d37
<     echo "  -upgrade [url]      -- download, build and install standard packages from"
<     echo "                         given url.  If url not given, automatically selects a"
<     echo "                         suitable mirror.  If url='ask', it lets you select"
<     echo "                         the mirror (uses SAGE_SERVER as default)."
73,74d68
<     echo "  -bn, -build-and-notebook [...] -- build the Sage library then start"
<     echo "                         the Sage notebook"
112,131d105
<     echo "Installing packages and upgrading:"
<     echo "  -experimental       -- list all experimental packages that can be installed"
<     echo "  -f [packages]       -- force build of the given Sage package (even if it is"
<     echo "                         already installed)"
<     echo "  -f -s [packages]    -- like -f but do not delete the spkg/build directories"
<     echo "  -i [packages]       -- install the given Sage packages"
<     echo "                         if no packages given, print a list of all installed"
<     echo "  -i -s [packages]    -- like -i but do not delete the spkg/build directories"
<     echo "  -optional           -- list all optional packages that can be installed"
<     echo "  -standard           -- list all standard packages that can be installed"
<    #echo "  -update             -- download latest non-optional Sage packages (do not build them)"
<    #echo "  -update-build       -- build and install all downloaded non-optional Sage packages"
<     echo "  -upgrade [url]      -- download, build and install standard packages from"
<     echo "                         given url.  If url not given, automatically selects a"
<     echo "                         suitable mirror.  If url='ask', it lets you select"
<     echo "                         the mirror (uses SAGE_SERVER as default)."
< 
<     echo
<     ####  1.......................26..................................................78
<     ####  |.....................--.|...................................................|
133,137d106
<     echo "  -b [branch]         -- build Sage library.  If branch is given, switch to"
<     echo "                         branch in devel/sage-branch and build that branch"
<     echo "  -ba [branch]        -- same as -b and rebuild all Cython code"
<     echo "  -ba-force [branch]  -- same as -ba, but don't query before rebuilding"
<     echo "  -br [branch]        -- switch to, build, and run Sage given branch"
139,143d107
<     echo "  -bt [...]           -- build and test, options like -t below"
<     echo "  -btp <N> [...]      -- build and test parallel, options like -tp below"
<     echo "  -btnew [...]        -- build and test modified files, options like -tnew"
<     echo "  -clone [new branch] -- clone a new branch of the Sage library from the"
<     echo "                         current branch"
157,158d120
<     echo "  -tnew [...]         -- like -t above, but only tests files modified since"
<     echo "                         last commit"
168,171d129
<     echo "  -coverage <files>   -- give info about doctest coverage of files"
<     echo "  -coverageall        -- give summary info about doctest coverage of all"
<     echo "                         files in the Sage library"
<     echo "  -docbuild [lang/]<document> <html|pdf|...> -- Build the Sage documentation"
179,185d136
<     echo "  -bdist VER          -- build a binary distribution of Sage"
<     echo "  -combinat [...]     -- run sage-combinat patch management script"
<     echo "  -crap sage-ver.tar  -- detect suspicious garbage in sage source tarball"
<    #echo "  -ldist VER          -- build a library Sage distribution (for install into"
<    #echo "                         existing Python)"
<     echo "  -log                -- add entry to <SAGE_ROOT>/changelog.txt"
<     echo "  -merge              -- run Sage's automatic merge and test script"
188d138
<     echo "  -sdist VER          -- build a source distribution of Sage"
216,230d165
< # Do NOT redirect stderr and stdout to /dev/null,
< # since sage-env might print important error messages:
< . "$SAGE_ROOT"/local/bin/sage-env
< 
< # The following doesn't make much sense, since we *source* sage-env,
< # and if that does exit, it exits *this* shell(!). Only if sourcing
< # the file itself fails (because e.g. sage-env does not exist, or a
< # syntax error occurs in its last command), the error message below
< # will be printed:
< if [ $? -ne 0 ]; then
<    echo >&2 "Error setting environment variables by running \"$SAGE_ROOT/local/bin/sage-env\";"
<    echo >&2 "possibly contact sage-devel (see http://groups.google.com/group/sage-devel)."
<    exit 1
< fi
< 
260,267c195
<     # Check to see if the whole Sage install tree has moved.
<     # If so, regenerate .pyc files.
<     "$SAGE_ROOT/local/bin/"sage-location
<     if [ $? -ne 0 ]; then
<         exit 1
<     fi
< 
<     cd "$SAGE_ROOT/local/bin"
---
>     cd "$SAGE_LOCAL/bin"
354,360d281
< if [ "$1" = '-combinat' -o "$1" = '--combinat' ]; then
<     cd "$CUR"
<     shift
<     sage-combinat "$@"
<     exit $?
< fi
< 
537,573d457
< if [ "$1" = '-merge' ]; then
<     cd "$CUR"
<     shift
<     sage-apply-ticket "$@"
<     exit $?
< fi
< 
< #####################################################################
< # Test coverage of a module?
< #####################################################################
< 
< if [ "$1" = "-coverage" -o "$1" = "--coverage" ]; then
<    cd "$CUR"
<    shift
<    sage-coverage "$@"
<    exit $?
< fi
< 
< if [ "$1" = "-coverageall" -o "$1" = "--coverageall" ]; then
<    cd "$CUR"
<    shift
<    sage-coverageall "$@"
<    exit $?
< fi
< 
< 
< #####################################################################
< # Crap
< #####################################################################
< 
< if [ "$1" = "-crap" -o "$1" = "--crap" ]; then
<    shift
<    cd "$CUR"
<    sage-crap $@
<    exit $?
< fi
< 
578,590d461
< build_sage() {
<     if [ "$SAGE_PBUILD" == "yes" ]; then
<         echo >&2 'Pbuild is currently broken -- defaulting to serial build.'
<         # if [ "$@" ]; then
<         #     ln -snf "$SAGE_ROOT"/devel/sage-"$@" "$SAGE_ROOT"/devel/sage
<         # fi
<         # time python "$SAGE_ROOT"/devel/sage/build.py -b
<         sage-build "$@"
<     else
<         sage-build "$@"
<     fi
< }
< 
599,606d469
< if [ "$1" = "-bn" -o "$1" = "--build-and-notebook" ]; then
<     cd "$CUR"
<     shift
<     sage-cleaner &>/dev/null &
<     build_sage && sage-notebook "$@"
<     exit $?
< fi
< 
615,626d477
< if [ "$1" = "-wiki"  -o "$1" = '--wiki' ]; then
<    cd "$CUR"
<    shift
<    sage-wiki "$@"
<    exit $?
< fi
< 
< if [ "$1" = "-log" -o "$1" = "--log" ]; then
<    sage-log
<    exit 0
< fi
< 
649,723c500
< if [ "$1" = '-b' ]; then
<     shift
<     time build_sage "$@"
<     exit $?
< fi
< 
< if [ "$1" = '-br' -o "$1" = "--br" ]; then
<     shift
<     build_sage "$@" && sage
<     exit $?
< fi
< 
< if [ "$1" = '-r' ]; then
<    shift
<    if [ "$1" != "" ]; then
<       cd "$SAGE_ROOT/devel/"
<       if [ ! -d "sage-$1" ]; then
<          echo >&2 "No such branch '$SAGE_ROOT/devel/sage-$1'"
<          echo >&2 "Use 'sage -clone' to create a new branch."
<          exit 1
<       fi
<       # On Solaris (and perhaps other systems), "ln -snf FILE LINK"
<       # doesn't remove LINK and then relink it, so we need to first
<       # delete LINK -- in this case, SAGE_ROOT/devel/sage -- and then
<       # create a new link.  We use the full path name to make sure we
<       # remove the correct file.
<       rm -f "$SAGE_ROOT/devel/sage"
<       ln -s "sage-$1" sage
<       cd "$SAGE_ROOT"
<    fi
<    sage
<    exit $?
< fi
< 
< if [ "$1" = '-ba' ]; then
<    shift
<    echo " *** WARNING ***"
<    echo " You are about to rebuild the entire Sage library."
<    echo " This will take a significant amount of time."
<    echo " (Use -ba-force instead of -ba to skip this prompt.)"
<    echo -n " Do you want to proceed? [y/n] "
<    read CHOICE
<    while [ "$CHOICE" != "y" -a "$CHOICE" != "n" ]; do
< 	   echo -n " Choose one of y, n: "
< 	   read CHOICE
<    done
<    if [ $CHOICE = 'n' ]; then
< 	   exit 0
<    fi
<    build_sage -b "$@"
<    exit $?
< fi
< 
< if [ "$1" = '-ba-force' ]; then
<    shift
<    build_sage -b "$@"
<    exit $?
< fi
< 
< if [ "$1" = '-sync-build' -o "$1" = '--sync-build' ]; then
<    shift
<    python "$SAGE_LOCAL"/bin/sage-sync-build.py "$@"
<    exit $?
< fi
< 
< if [ "$1" = '-clone' -o "$1" = "--clone" ]; then
<    shift
<    time sage-clone "$@"
<    exit $?
< fi
< 
< if [ "$1" = '-t' -o "$1" = '-bt' ]; then
<    if [ "$1" = '-bt' ]; then
<       build_sage || exit $?
<    fi
---
> if [ "$1" = '-t' ]; then
734,738c511
< if [ "$1" = '-tp' -o "$1" = '-btp' ]; then
<    if [ "$1" = '-btp' ]; then
<       build_sage || exit $?
<    fi
<    cd "$CUR"
---
> if [ "$1" = '-tp' ]; then
749,758d521
< if [ "$1" = '-tnew' -o "$1" = '-btnew' ]; then
<    if [ "$1" = '-btnew' ]; then
<       build_sage || exit $?
<    fi
<    cd "$CUR"
<    shift
<    sage-test-new "$@"
<    exit $?
< fi
< 
774,832d536
< install() {
<    cd "$SAGE_ROOT/spkg"
<    if [ $# -lt 2 ]; then
<        sage-spkg
<        exit $?
<    fi
<    OPT="$1"
<    shift
<    if [ "$1" = '-m' -o "$1" = '-s' ]; then
<        OPT=$OPT" "$1
<        shift
<    fi
<    SAGE_LOGS="$SAGE_ROOT/spkg/logs"
<    if [ ! -d "$SAGE_LOGS" ]; then
<        mkdir -p "$SAGE_LOGS"
<    fi
<    for PKG in "$@"
<    do
<        echo "Calling sage-spkg on $PKG"
<        PKG_NAME=`echo "$PKG" | sed -e "s/\.spkg$//"`
<        PKG_NAME=`basename "$PKG_NAME"`
<        case $PKG in
< 	   /*)
< 	       sage-spkg $OPT "$PKG" 2>&1 | (trap "" SIGINT; tee -a ../install.log "$SAGE_LOGS/$PKG_NAME".log)
< 	   ;;
< 	   *)
< 	       sage-spkg $OPT "$CUR/$PKG" 2>&1 | (trap "" SIGINT; tee -a ../install.log "$SAGE_LOGS/$PKG_NAME".log)
< 	   ;;
<        esac
< 
<        if [ $? -ne 0 ]; then
<           exit 1
<        fi
<        shift
<    done
<    exit $?
< }
< 
< if [ "$1" = '-optional' -o "$1" = "--optional" ]; then
<    sage-list-optional
<    exit 0
< fi
< 
< if [ "$1" = '-experimental' -o "$1" = "--experimental" ]; then
<    sage-list-experimental
<    exit 0
< fi
< 
< if [ "$1" = '-standard' -o "$1" = "--standard" ]; then
<    sage-list-standard
<    exit 0
< fi
< 
< if [ "$1" = '-i' ]; then
<    shift
<    echo "Installing $@"
<    install " " "$@"
< fi
< 
836c540,542
<    install -f "$@"
---
>    if [ $# -lt 1 ]; then
>        echo "Currently installed packages:"
>    fi
867,945d572
< if [ "$1" = '-sdist' -o "$1" = "--sdist" ]; then
<    if [ $# -ne 2 ]; then
<        echo >&2 "** MISSING VERSION NUMBER! **"
<        exit 1
<    fi
<    sage-sdist $2 "$SAGE_ROOT"
<    exit $?
< fi
< 
< if [ "$1" = '-ldist' -o "$1" = "--ldist" ]; then
<    echo "sage -ldist currently disabled"
<    echo "To work on it, remove the exit after this message in SAGE_ROOT/local/bin/sage-sage"
<    exit 1
<    if [ $# -ne 2 ]; then
<        echo >&2 "** MISSING VERSION NUMBER! **"
<        exit 1
<    fi
<    sage-sdist $2 "$SAGE_ROOT"
<    if [ $? -ne 0 ]; then
<        echo >&2 "Error building source distribution"
<        exit 1
<    fi
<    cd "$SAGE_ROOT"/dist/
<    if [ $? -ne 0 ]; then
<        echo >&2 "Error changing to source distribution directory"
<        exit 1
<    fi
<    "$SAGE_ROOT"/local/bin/sage-libdist sage-$2.tar
<    exit $?
< fi
< 
< if [ "$1" = '-bdist' -o "$1" = "--bdist" ]; then
<    if [ $# -ne 2 ]; then
<        echo >&2 "** MISSING VERSION NUMBER! **"
<        exit 1
<    fi
<    sage-bdist $2 "$SAGE_ROOT"
<    exit $?
< fi
< 
< #if [ "$1" = '-update' ]; then
< #    sage-update
< #    exit $?
< #fi
< 
< #if [ "$1" = '-update-build' -o "$1" = "--update-build" ]; then
< #    sage-update-build
< #    sage-update-build
< #    exit $?
< #fi
< 
< if [ "$1" = '-upgrade' -o "$1" = "--upgrade" ]; then
<     # People often move the Sage install right before doing the upgrade, so it's
<     # important to fix any path hardcoding issues first, or certain library
<     # links will fail.
<     "$SAGE_ROOT/local/bin/"sage-location
< 
<     # Do it twice since when installing sage-scripts and a running
<     # script changes, it gets confused and exits with an error.
<     # Running again (with the script replaced) then fixes the problem.
<     # Run from a temporary copy of sage-sage
<     shift
<     sage-upgrade "$@"
<     if [ $? = 2 ]; then   # this exit codes means the user elected not to do the upgrade at all.
<         exit $?
<     fi
<     echo "Double checking that all packages have been installed."
<     sage-upgrade "$@"
<     exit $?
< fi
< 
< if [ "$1" = "-docbuild" -o "$1" = "--docbuild" ]; then
<    cd "$CUR"
<    shift
<    python "$SAGE_ROOT"/devel/sage/doc/common/builder.py $@
<    exit $?
< fi
< 
< 
1007,1010d633
<    if [ "$T " = "spkg " ]; then
<        install "" "$@"
<        exit $?
<    fi

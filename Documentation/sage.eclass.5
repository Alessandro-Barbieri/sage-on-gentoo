.\" ### DO NOT EDIT THIS FILE
.\" ### This man page is autogenerated by eclass-to-manpage.awk
.\" ### based on comments found in sage.eclass
.\"
.\" See eclass-to-manpage.awk for documentation on how to get
.\" your eclass nicely documented as well.
.\"
.TH "SAGE.ECLASS" 5 "Jan 2010" "Portage" "portage"
.SH "NAME"
sage.eclass \- Tools to ease the compilation of Sage's spkg-packages and Sage itself
.SH "DESCRIPTION"
The sage eclass serves two purposes:
Fistly, it eases the compilation of Sage itself by providing functions for
patching and modifying its *.spkg-files.

Secondly, in order to install packages from Sage's tarball it provides a
src_unpack function for automatic unpacking. You must set the following two
variables to make use of this:

.nf
SAGE_VERSION
SAGE_PACKAGE
.fi
.SH "EXAMPLE"
The following is a minimal version of the flintqs ebuild and shows the usage
for packages included in Sage's tarball:

.nf
EAPI=2

SAGE_VERSION="4.2.1"
SAGE_PACKAGE="flintqs-20070817.p4"

inherit eutils sage

[..]

src_prepare() {
	cp "${SAGE_FILESDIR}"/lanczos.h .

	[..]
}

[..]
.fi
.SH "FUNCTIONS"
.TP
\fBhg_clean\fR [list of dirs]
Remove Mercurial directories recursiveley.  Useful when a source tarball
contains internal Mercurial directories.  Defaults to $PWD.
.TP
\fBsage_clean_targets\fR [list of makefile targets to clean]
This function clears the prerequisites and commands for the specified targets
in Sage's deps-makefile. If one wants to use e.g. sqlite from portage, do the
following:

.nf
sage_clean_targets SQLITE
.fi

This modifies ${S}/spkg/standard/deps, which contains in sage-4.2.1 the
following lines:

.nf
$(INST)/$(SQLITE): $(INST)/$(TERMCAP) $(INST)/$(READLINE)
    $(SAGE_SPKG) $(SQLITE) 2>&1
.fi

The lines above will now be replaced with:

.nf
$(INST)/$(SQLITE):
    @echo "using SQLITE from portage"
.fi

so that ${S}/spkg/standard/deps is still a valid makefile but without building
sqlite.
.TP
\fBsage_package\fR <spkg name> <commands>
Extracts package and runs supplied command(s).
.TP
\fBsage_package_finish\fR 
ATTENTION: This function must be executed if the sage_package-function was
invoked. This cleans up and packs all unpacked spkgs.
.TP
\fBsage_src_unpack\fR 
If ${SAGE_PACKAGE} and ${SAGE_VERSION} is set this function is exported. It
will unpack the specified spkgs and also correctly set the source directory
('${S}') and a variable ${SAGE_FILESDIR} which points to the patches
directory, if available. Note that ${SAGE_PACKAGE} may be an array. If thats
the case all spkgs contained will be unpacked.
.SH "ECLASS VARIABLES"
.TP
\fBSAGE_ROOT\fR = \fI/opt/sage\fR
Points to the directory where Sage will be installed to
.TP
\fBSAGE_DATA\fR = \fI"${SAGE_ROOT}"/data\fR
Points to the directory where Sage's data files will be installed to
.TP
\fBSAGE_LOCAL\fR = \fI"${SAGE_ROOT}"/local\fR
Points to the directory where Sage's local directory will be
.SH "MAINTAINERS"
Francois Bissey <f.r.bissey@massey.ac.nz>
Christopher Schwan <cschwan@students.uni-mainz.de>

Original authors: Francois Bissey <f.r.bissey@massey.ac.nz>
Christopher Schwan <cschwan@students.uni-mainz.de>
.SH "REPORTING BUGS"
Please report bugs via http://bugs.gentoo.org/
.SH "FILES"
.BR /usr/portage/eclass/sage.eclass
.SH "SEE ALSO"
.BR ebuild (5)
